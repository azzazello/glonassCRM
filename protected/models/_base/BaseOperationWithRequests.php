<?php

/**
 * This is the model base class for the table "operation_with_requests".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "OperationWithRequests".
 *
 * Columns in table "operation_with_requests" available as properties of the model,
 * followed by relations of table "operation_with_requests" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idRequest
 * @property integer $lastIdView
 * @property integer $userId
 *
 * @property RequestShipping $idRequest0
 * @property Users $user
 */
abstract class BaseOperationWithRequests extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'operation_with_requests';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'OperationWithRequests|OperationWithRequests', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('idRequest, userId', 'required'),
			array('idRequest, lastIdView, userId', 'numerical', 'integerOnly'=>true),
			array('lastIdView', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idRequest, lastIdView, userId', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idRequest0' => array(self::BELONGS_TO, 'RequestShipping', 'idRequest'),
			'user' => array(self::BELONGS_TO, 'Users', 'userId'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idRequest' => null,
			'lastIdView' => Yii::t('app', 'Last Id View'),
			'userId' => null,
			'idRequest0' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idRequest', $this->idRequest);
		$criteria->compare('lastIdView', $this->lastIdView);
		$criteria->compare('userId', $this->userId);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}