<?php

/**
 * This is the model base class for the table "request_shipping".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "RequestShipping".
 *
 * Columns in table "request_shipping" available as properties of the model,
 * followed by relations of table "request_shipping" available as properties of the model.
 *
 * @property integer $id
 * @property string $date_create
 * @property integer $user_id
 * @property integer $status_id
 * @property string $date_close
 * @property string $region_load_kladr_code
 * @property integer $region_unload_id
 * @property integer $stividor_id
 * @property integer $culure_id
 * @property integer $trader_id
 * @property string $price
 * @property integer $weight
 * @property integer $scale
 * @property integer $load_type_id
 * @property string $where_calculation
 * @property integer $is_overload
 * @property integer $distance
 * @property string $date_load
 *
 * @property ReplyShipping[] $replyShippings
 * @property Culture $culure
 * @property LoadType $loadType
 * @property Kladr $regionLoadKladrCode
 * @property RegionUnload $regionUnload
 * @property Status $status
 * @property Stevedore $stividor
 * @property Trader $trader
 * @property Users $user
 */
abstract class BaseRequestShipping extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'request_shipping';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'RequestShipping|RequestShippings', $n);
	}

	public static function representingColumn() {
		return 'date_create';
	}

	public function rules() {
		return array(
			array('date_create, user_id, date_close, region_load_kladr_code, region_unload_id, stividor_id, culure_id, trader_id, price, weight, scale, load_type_id, where_calculation, is_overload, distance, date_load', 'required'),
			array('user_id, status_id, region_unload_id, stividor_id, culure_id, trader_id, weight, scale, load_type_id, is_overload, distance', 'numerical', 'integerOnly'=>true),
			array('region_load_kladr_code', 'length', 'max'=>13),
			array('price', 'length', 'max'=>10),
			array('where_calculation', 'length', 'max'=>255),
			array('status_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, date_create, user_id, status_id, date_close, region_load_kladr_code, region_unload_id, stividor_id, culure_id, trader_id, price, weight, scale, load_type_id, where_calculation, is_overload, distance, date_load', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'replyShippings' => array(self::HAS_MANY, 'ReplyShipping', 'request_id'),
			'culure' => array(self::BELONGS_TO, 'Culture', 'culure_id'),
			'loadType' => array(self::BELONGS_TO, 'LoadType', 'load_type_id'),
			'regionLoadKladrCode' => array(self::BELONGS_TO, 'Kladr', 'region_load_kladr_code'),
			'regionUnload' => array(self::BELONGS_TO, 'RegionUnload', 'region_unload_id'),
			'status' => array(self::BELONGS_TO, 'Status', 'status_id'),
			'stividor' => array(self::BELONGS_TO, 'Stevedore', 'stividor_id'),
			'trader' => array(self::BELONGS_TO, 'Trader', 'trader_id'),
			'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'date_create' => Yii::t('app', 'Date Create'),
			'user_id' => null,
			'status_id' => null,
			'date_close' => Yii::t('app', 'Date Close'),
			'region_load_kladr_code' => null,
			'region_unload_id' => null,
			'stividor_id' => null,
			'culure_id' => null,
			'trader_id' => null,
			'price' => Yii::t('app', 'Price'),
			'weight' => Yii::t('app', 'Weight'),
			'scale' => Yii::t('app', 'Scale'),
			'load_type_id' => null,
			'where_calculation' => Yii::t('app', 'Where Calculation'),
			'is_overload' => Yii::t('app', 'Is Overload'),
			'distance' => Yii::t('app', 'Distance'),
			'date_load' => Yii::t('app', 'Date Load'),
			'replyShippings' => null,
			'culure' => null,
			'loadType' => null,
			'regionLoadKladrCode' => null,
			'regionUnload' => null,
			'status' => null,
			'stividor' => null,
			'trader' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('date_create', $this->date_create, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('status_id', $this->status_id);
		$criteria->compare('date_close', $this->date_close, true);
		$criteria->compare('region_load_kladr_code', $this->region_load_kladr_code);
		$criteria->compare('region_unload_id', $this->region_unload_id);
		$criteria->compare('stividor_id', $this->stividor_id);
		$criteria->compare('culure_id', $this->culure_id);
		$criteria->compare('trader_id', $this->trader_id);
		$criteria->compare('price', $this->price, true);
		$criteria->compare('weight', $this->weight);
		$criteria->compare('scale', $this->scale);
		$criteria->compare('load_type_id', $this->load_type_id);
		$criteria->compare('where_calculation', $this->where_calculation, true);
		$criteria->compare('is_overload', $this->is_overload);
		$criteria->compare('distance', $this->distance);
		$criteria->compare('date_load', $this->date_load, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}